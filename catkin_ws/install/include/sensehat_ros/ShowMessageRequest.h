// Generated by gencpp from file sensehat_ros/ShowMessageRequest.msg
// DO NOT EDIT!


#ifndef SENSEHAT_ROS_MESSAGE_SHOWMESSAGEREQUEST_H
#define SENSEHAT_ROS_MESSAGE_SHOWMESSAGEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensehat_ros
{
template <class ContainerAllocator>
struct ShowMessageRequest_
{
  typedef ShowMessageRequest_<ContainerAllocator> Type;

  ShowMessageRequest_()
    : text()
    , scroll_speed(0.0)
    , text_colour()
    , back_colour()  {
      text_colour.assign(0);

      back_colour.assign(0);
  }
  ShowMessageRequest_(const ContainerAllocator& _alloc)
    : text(_alloc)
    , scroll_speed(0.0)
    , text_colour()
    , back_colour()  {
  (void)_alloc;
      text_colour.assign(0);

      back_colour.assign(0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _text_type;
  _text_type text;

   typedef double _scroll_speed_type;
  _scroll_speed_type scroll_speed;

   typedef boost::array<int16_t, 3>  _text_colour_type;
  _text_colour_type text_colour;

   typedef boost::array<int16_t, 3>  _back_colour_type;
  _back_colour_type back_colour;





  typedef boost::shared_ptr< ::sensehat_ros::ShowMessageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensehat_ros::ShowMessageRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ShowMessageRequest_

typedef ::sensehat_ros::ShowMessageRequest_<std::allocator<void> > ShowMessageRequest;

typedef boost::shared_ptr< ::sensehat_ros::ShowMessageRequest > ShowMessageRequestPtr;
typedef boost::shared_ptr< ::sensehat_ros::ShowMessageRequest const> ShowMessageRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensehat_ros::ShowMessageRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensehat_ros::ShowMessageRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensehat_ros::ShowMessageRequest_<ContainerAllocator1> & lhs, const ::sensehat_ros::ShowMessageRequest_<ContainerAllocator2> & rhs)
{
  return lhs.text == rhs.text &&
    lhs.scroll_speed == rhs.scroll_speed &&
    lhs.text_colour == rhs.text_colour &&
    lhs.back_colour == rhs.back_colour;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensehat_ros::ShowMessageRequest_<ContainerAllocator1> & lhs, const ::sensehat_ros::ShowMessageRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensehat_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sensehat_ros::ShowMessageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensehat_ros::ShowMessageRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensehat_ros::ShowMessageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensehat_ros::ShowMessageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensehat_ros::ShowMessageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensehat_ros::ShowMessageRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensehat_ros::ShowMessageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4db536e63c8164b2d79316cbb359b0f0";
  }

  static const char* value(const ::sensehat_ros::ShowMessageRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4db536e63c8164b2ULL;
  static const uint64_t static_value2 = 0xd79316cbb359b0f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensehat_ros::ShowMessageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensehat_ros/ShowMessageRequest";
  }

  static const char* value(const ::sensehat_ros::ShowMessageRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensehat_ros::ShowMessageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# scrolls a text message from right to left across the LED matrix and at the specified speed, in the specified colour and background colour\n"
"string text\n"
"float64 scroll_speed\n"
"int16[3] text_colour\n"
"int16[3] back_colour\n"
;
  }

  static const char* value(const ::sensehat_ros::ShowMessageRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensehat_ros::ShowMessageRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.text);
      stream.next(m.scroll_speed);
      stream.next(m.text_colour);
      stream.next(m.back_colour);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ShowMessageRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensehat_ros::ShowMessageRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensehat_ros::ShowMessageRequest_<ContainerAllocator>& v)
  {
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.text);
    s << indent << "scroll_speed: ";
    Printer<double>::stream(s, indent + "  ", v.scroll_speed);
    s << indent << "text_colour[]" << std::endl;
    for (size_t i = 0; i < v.text_colour.size(); ++i)
    {
      s << indent << "  text_colour[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.text_colour[i]);
    }
    s << indent << "back_colour[]" << std::endl;
    for (size_t i = 0; i < v.back_colour.size(); ++i)
    {
      s << indent << "  back_colour[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.back_colour[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSEHAT_ROS_MESSAGE_SHOWMESSAGEREQUEST_H

// Generated by gencpp from file sensehat_ros/Stick.msg
// DO NOT EDIT!


#ifndef SENSEHAT_ROS_MESSAGE_STICK_H
#define SENSEHAT_ROS_MESSAGE_STICK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sensehat_ros
{
template <class ContainerAllocator>
struct Stick_
{
  typedef Stick_<ContainerAllocator> Type;

  Stick_()
    : header()
    , direction()
    , action()  {
    }
  Stick_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , direction(_alloc)
    , action(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _direction_type;
  _direction_type direction;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  _action_type action;





  typedef boost::shared_ptr< ::sensehat_ros::Stick_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensehat_ros::Stick_<ContainerAllocator> const> ConstPtr;

}; // struct Stick_

typedef ::sensehat_ros::Stick_<std::allocator<void> > Stick;

typedef boost::shared_ptr< ::sensehat_ros::Stick > StickPtr;
typedef boost::shared_ptr< ::sensehat_ros::Stick const> StickConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensehat_ros::Stick_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensehat_ros::Stick_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensehat_ros::Stick_<ContainerAllocator1> & lhs, const ::sensehat_ros::Stick_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.direction == rhs.direction &&
    lhs.action == rhs.action;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensehat_ros::Stick_<ContainerAllocator1> & lhs, const ::sensehat_ros::Stick_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensehat_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sensehat_ros::Stick_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensehat_ros::Stick_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensehat_ros::Stick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensehat_ros::Stick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensehat_ros::Stick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensehat_ros::Stick_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensehat_ros::Stick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7518ab70ca2e75fc897434e945b29029";
  }

  static const char* value(const ::sensehat_ros::Stick_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7518ab70ca2e75fcULL;
  static const uint64_t static_value2 = 0x897434e945b29029ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensehat_ros::Stick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensehat_ros/Stick";
  }

  static const char* value(const ::sensehat_ros::Stick_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensehat_ros::Stick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Describes the Stick event triggered on the Sense HAT device\n"
"Header header\n"
"# The direction the joystick was moved (\"up\", \"down\", \"left\", \"right\", \"middle\")\n"
"string direction\n"
"# The action that occurred (\"pressed\", \"released\", \"held\")\n"
"string action\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::sensehat_ros::Stick_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensehat_ros::Stick_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.direction);
      stream.next(m.action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Stick_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensehat_ros::Stick_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensehat_ros::Stick_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.direction);
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSEHAT_ROS_MESSAGE_STICK_H

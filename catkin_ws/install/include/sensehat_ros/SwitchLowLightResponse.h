// Generated by gencpp from file sensehat_ros/SwitchLowLightResponse.msg
// DO NOT EDIT!


#ifndef SENSEHAT_ROS_MESSAGE_SWITCHLOWLIGHTRESPONSE_H
#define SENSEHAT_ROS_MESSAGE_SWITCHLOWLIGHTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensehat_ros
{
template <class ContainerAllocator>
struct SwitchLowLightResponse_
{
  typedef SwitchLowLightResponse_<ContainerAllocator> Type;

  SwitchLowLightResponse_()
    : low_light(false)  {
    }
  SwitchLowLightResponse_(const ContainerAllocator& _alloc)
    : low_light(false)  {
  (void)_alloc;
    }



   typedef uint8_t _low_light_type;
  _low_light_type low_light;





  typedef boost::shared_ptr< ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SwitchLowLightResponse_

typedef ::sensehat_ros::SwitchLowLightResponse_<std::allocator<void> > SwitchLowLightResponse;

typedef boost::shared_ptr< ::sensehat_ros::SwitchLowLightResponse > SwitchLowLightResponsePtr;
typedef boost::shared_ptr< ::sensehat_ros::SwitchLowLightResponse const> SwitchLowLightResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator1> & lhs, const ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator2> & rhs)
{
  return lhs.low_light == rhs.low_light;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator1> & lhs, const ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensehat_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "28b22af2b341afecad6c7499580b70d4";
  }

  static const char* value(const ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x28b22af2b341afecULL;
  static const uint64_t static_value2 = 0xad6c7499580b70d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensehat_ros/SwitchLowLightResponse";
  }

  static const char* value(const ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool low_light\n"
;
  }

  static const char* value(const ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.low_light);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SwitchLowLightResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensehat_ros::SwitchLowLightResponse_<ContainerAllocator>& v)
  {
    s << indent << "low_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.low_light);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSEHAT_ROS_MESSAGE_SWITCHLOWLIGHTRESPONSE_H

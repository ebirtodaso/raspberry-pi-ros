// Generated by gencpp from file sensehat_ros/SetPixelsRequest.msg
// DO NOT EDIT!


#ifndef SENSEHAT_ROS_MESSAGE_SETPIXELSREQUEST_H
#define SENSEHAT_ROS_MESSAGE_SETPIXELSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensehat_ros
{
template <class ContainerAllocator>
struct SetPixelsRequest_
{
  typedef SetPixelsRequest_<ContainerAllocator> Type;

  SetPixelsRequest_()
    : pixels_red()
    , pixels_green()
    , pixels_blue()
    , duration(0.0)  {
      pixels_red.assign(0);

      pixels_green.assign(0);

      pixels_blue.assign(0);
  }
  SetPixelsRequest_(const ContainerAllocator& _alloc)
    : pixels_red()
    , pixels_green()
    , pixels_blue()
    , duration(0.0)  {
  (void)_alloc;
      pixels_red.assign(0);

      pixels_green.assign(0);

      pixels_blue.assign(0);
  }



   typedef boost::array<int16_t, 64>  _pixels_red_type;
  _pixels_red_type pixels_red;

   typedef boost::array<int16_t, 64>  _pixels_green_type;
  _pixels_green_type pixels_green;

   typedef boost::array<int16_t, 64>  _pixels_blue_type;
  _pixels_blue_type pixels_blue;

   typedef double _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::sensehat_ros::SetPixelsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensehat_ros::SetPixelsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetPixelsRequest_

typedef ::sensehat_ros::SetPixelsRequest_<std::allocator<void> > SetPixelsRequest;

typedef boost::shared_ptr< ::sensehat_ros::SetPixelsRequest > SetPixelsRequestPtr;
typedef boost::shared_ptr< ::sensehat_ros::SetPixelsRequest const> SetPixelsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensehat_ros::SetPixelsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensehat_ros::SetPixelsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensehat_ros::SetPixelsRequest_<ContainerAllocator1> & lhs, const ::sensehat_ros::SetPixelsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pixels_red == rhs.pixels_red &&
    lhs.pixels_green == rhs.pixels_green &&
    lhs.pixels_blue == rhs.pixels_blue &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensehat_ros::SetPixelsRequest_<ContainerAllocator1> & lhs, const ::sensehat_ros::SetPixelsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensehat_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sensehat_ros::SetPixelsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensehat_ros::SetPixelsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensehat_ros::SetPixelsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensehat_ros::SetPixelsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensehat_ros::SetPixelsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensehat_ros::SetPixelsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensehat_ros::SetPixelsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b50ba911a4776c69c8ff57eb35b1d884";
  }

  static const char* value(const ::sensehat_ros::SetPixelsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb50ba911a4776c69ULL;
  static const uint64_t static_value2 = 0xc8ff57eb35b1d884ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensehat_ros::SetPixelsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensehat_ros/SetPixelsRequest";
  }

  static const char* value(const ::sensehat_ros::SetPixelsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensehat_ros::SetPixelsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# sets each of the 64 LED matrix pixels to a specific RGB color and waits for the specified amount of seconds\n"
"int16[64] pixels_red\n"
"int16[64] pixels_green\n"
"int16[64] pixels_blue\n"
"float64 duration\n"
;
  }

  static const char* value(const ::sensehat_ros::SetPixelsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensehat_ros::SetPixelsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pixels_red);
      stream.next(m.pixels_green);
      stream.next(m.pixels_blue);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetPixelsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensehat_ros::SetPixelsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensehat_ros::SetPixelsRequest_<ContainerAllocator>& v)
  {
    s << indent << "pixels_red[]" << std::endl;
    for (size_t i = 0; i < v.pixels_red.size(); ++i)
    {
      s << indent << "  pixels_red[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.pixels_red[i]);
    }
    s << indent << "pixels_green[]" << std::endl;
    for (size_t i = 0; i < v.pixels_green.size(); ++i)
    {
      s << indent << "  pixels_green[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.pixels_green[i]);
    }
    s << indent << "pixels_blue[]" << std::endl;
    for (size_t i = 0; i < v.pixels_blue.size(); ++i)
    {
      s << indent << "  pixels_blue[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.pixels_blue[i]);
    }
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSEHAT_ROS_MESSAGE_SETPIXELSREQUEST_H
